"use strict";var __awaiter=this&&this.__awaiter||function(t,n,e,i){return new(e||(e=Promise))((function(s,o){function r(t){try{h(i.next(t))}catch(t){o(t)}}function l(t){try{h(i.throw(t))}catch(t){o(t)}}function h(t){var n;t.done?s(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(r,l)}h((i=i.apply(t,n||[])).next())}))},__importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0});const ngrok_1=__importDefault(require("ngrok")),envfile_1=__importDefault(require("envfile")),fs_1=__importDefault(require("fs")),path_1=__importDefault(require("path"));class ServerlessTunnel{constructor(t,n){this.serverless=t,this.log=t.cli.log.bind(t.cli),this.slsOptions=n,this.reconnectTried=!1,this.noEnvFile=!0,this.envContent={},this.options={},this.commands={tunnel:{lifecycleEvents:["init"]}},this.hooks={"tunnel:init":this.runServer.bind(this,!0),"before:offline:start:init":this.runServer.bind(this)}}runTunnel({port:t,envProp:n,ws:e=!1,path:i,ngrokOptions:s}){return __awaiter(this,void 0,void 0,(function*(){try{const o=yield ngrok_1.default.connect(Object.assign(Object.assign({addr:t,proto:"http",region:"eu"},s||{}),{onStatusChange:t=>"closed"===t?this.onTunnelClose():void 0,onLogEvent:this.log}));this.onConnect(o,n,e,i)}catch(t){this.errorHandler(t)}}))}onConnect(t,n,e,i){const s=e?t.replace("http","ws"):t;n?(this.envContent[n]=`${s}${i||""}`,this.log(`${n} available at: ${this.envContent[n]}`)):this.log(`Tunnel created at ${s}${i||""}`),this.writeToEnv()}errorHandler(t){this.log(`Tunnels error: ${t.message}. Trying to reconnect in 5 seconds...`),this.tryReconnect()}onTunnelClose(){this.log("Closing tunnels...")}runServer(t){var n,e;if(this.options=null!==(e=null===(n=this.serverless.service.custom)||void 0===n?void 0:n.ngrokTunnel)&&void 0!==e?e:{},this.options.envPath){this.noEnvFile=!1,this.envPath=path_1.default.resolve(process.cwd(),this.options.envPath);try{this.envContent=envfile_1.default.parse(this.envPath)}catch(t){this.envContent={},this.noEnvFile=!0}}("true"===this.slsOptions.tunnel||t)&&(this.options.tunnels&&this.options.tunnels.length?(this.log("Starting tunnels..."),this.options.tunnels.forEach((t=>this.runTunnel(t))),process.on("SIGINT",(()=>this.stopTunnel()))):this.log("Tunnels are not configured. Skipping..."))}stopTunnel(){var t;return __awaiter(this,void 0,void 0,(function*(){yield ngrok_1.default.kill(),this.noEnvFile||(null===(t=this.options.tunnels)||void 0===t||t.forEach((({envProp:t})=>{t&&delete this.envContent[t]})),yield this.writeToEnv())}))}tryReconnect(){this.reconnectTried||(setTimeout((()=>{var t;null===(t=this.options.tunnels)||void 0===t||t.forEach((t=>this.runTunnel(t)))}),5e3),this.reconnectTried=!0)}writeToEnv(){return __awaiter(this,void 0,void 0,(function*(){this.noEnvFile||(yield fs_1.default.promises.writeFile(this.envPath,envfile_1.default.stringify(this.envContent)))}))}}exports.default=ServerlessTunnel;